{"version":3,"sources":["Image/Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","getIDs","fetch","then","response","json","data","setState","collectionIDs","objectIDs","getArt","collectionID","console","log","image","thumbnailUrl","getArtInfo","artInfo","Object","values","metadata","value","state","id","this","prevState","className","src","width","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSA2GeA,G,kBAtGb,aAAe,IAAD,8BACZ,+CAqBFC,OAAS,WAEPC,MAAM,yCACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEC,cAAeF,EAAKG,gBA1BvC,EAgDdC,OAAS,SAACC,GAERT,MAAM,gDAAkDS,EAAe,2BACrER,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAASM,QAAQC,IAAI,SAAUP,GAAO,EAAKC,SAAS,CAAEO,MAAOR,EAAKS,mBApD7D,EAsEdC,WAAa,SAACL,GAEZT,MAAM,+CAAiDS,GACrDR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAASM,QAAQC,IAAI,MAAOP,GAAO,EAAKC,SAAS,CAAEU,QAASC,OAAOC,OAAOb,EAAKc,SAAS,GAAGC,MAAM,IAAI,SAxE5G,EAAKC,MAAQ,CACXd,cAAe,GACfe,GAAI,eAJM,E,iFAUZC,KAAKvB,SAELuB,KAAKd,OAAOc,KAAKF,MAAMC,IACvBC,KAAKR,WAAWQ,KAAKF,MAAMC,M,yCAGVE,GACbA,EAAUjB,gBAAkBgB,KAAKF,MAAMd,eACzCI,QAAQC,IAAI,wBAAyBW,KAAKF,MAAMd,iB,+BA2ElD,OACE,yBAAKkB,UAAU,uBACZF,KAAKF,MAAMR,OAAS,yBAAKa,IAAKH,KAAKF,MAAMR,MAAOc,MAAM,MAAMC,IAAI,YAAYH,UAAU,cACrFF,KAAKF,MAAML,SAAW,4BAAKO,KAAKF,MAAML,c,GAlG5Ba,cCSLC,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCKcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.5983fbbf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './image.css'\n\nclass Image extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      collectionIDs: [],\n      id: 'kks1982-156'\n      // Try other ids, for example 'kks1982-156',\n    }\n  }\n\n  componentDidMount() {\n    this.getIDs()\n\n    this.getArt(this.state.id)\n    this.getArtInfo(this.state.id)\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.collectionIDs !== this.state.collectionIDs) {\n      console.log('print collection IDs ', this.state.collectionIDs)\n    }\n  }\n\n  getIDs = () => {\n\n    fetch('https://api.smk.dk/api/v1/art/all_ids')\n     .then(response => response.json())\n     .then(data => this.setState({ collectionIDs: data.objectIDs }));\n\n\n    //Another way of geting IDs array\n\n    // var xhr = new XMLHttpRequest()\n    // xhr.responseType = 'json';\n    // let jsonResponse\n    // xhr.addEventListener('load', () => {\n    //\n    //   jsonResponse = xhr.response\n    //   console.log(jsonResponse.objectIDs)\n    //   this.setState({\n    //     collectionIDs: jsonResponse.objectIDs\n    //   })\n    // })\n    //\n    // xhr.open('GET', 'https://api.smk.dk/api/v1/art/all_ids')\n    // xhr.send()\n  }\n\n  // Get image using collectionID\n  getArt = (collectionID) => {\n\n    fetch('https://api.smk.dk/api/v1/art/?object_number=' + collectionID + '&output=JSON-LD&lang=en')\n     .then(response => response.json())\n     .then(data => {console.log('dataaa', data); this.setState({ image: data.thumbnailUrl })});\n\n    //Another way of getting an image\n\n    // var xhr = new XMLHttpRequest()\n    // xhr.responseType = 'json';\n    //\n    // xhr.addEventListener('load', () => {\n    //   console.log('getArt ', xhr.response)\n    //   this.setState({\n    //     image: xhr.response.thumbnailUrl\n    //   })\n    // })\n    //\n    // xhr.open('GET', 'https://api.smk.dk/api/v1/art/?object_number=' + collectionID + '&output=JSON-LD&lang=en')\n    // xhr.send()\n  }\n\n  getArtInfo = (collectionID) => {\n\n    fetch('https://api.smk.dk/api/v1/iiif/manifest/?id=' + collectionID)\n     .then(response => response.json())\n     .then(data => {console.log('img', data); this.setState({ artInfo: Object.values(data.metadata[2].value[0])[0] })});\n\n    //Another way of getting art info\n\n    // var xhr = new XMLHttpRequest()\n    // xhr.responseType = 'json';\n    //\n    // xhr.addEventListener('load', () => {\n    //   console.log('getArt info ', xhr.response)\n    //   this.setState({\n    //     artInfo: Object.values(xhr.response.metadata[2].value[0])[0]\n    //   })\n    // })\n    //\n    // xhr.open('GET', 'https://api.smk.dk/api/v1/iiif/manifest/?id=' + collectionID)\n    // xhr.send()\n  }\n\n  render() {\n    return (\n      <div className=\"center imgContainer\">\n        {this.state.image && <img src={this.state.image} width=\"400\" alt=\"something\" className=\"thumbnail\"/>}\n        { this.state.artInfo && <h4>{this.state.artInfo}</h4> }\n      </div>\n    )\n  }\n}\n\nexport default Image;\n","import React from 'react';\nimport './App.css';\nimport Image from './Image/Image'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Image />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}